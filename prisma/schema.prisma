// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

generator erd {
  provider                  = "prisma-erd-generator"
  theme                     = "forest"
  output                    = "generated/ERD.md"
  includeRelationFromFields = true
  disableEmoji              = true
}

generator kysely {
  provider     = "prisma-kysely"
  fileName     = "types.ts"
  enumFileName = "enums.ts"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           String         @id @default(uuid())
  email        String         @unique
  username     String         @unique
  password     String
  role         Role           @default(USER)
  name         String
  avatar       String?
  dayOfBirth   DateTime       @db.Timestamp()
  phoneNumber  String
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  Order        Order[]
  ShoppingCart ShoppingCart[]
}

model Category {
  id          String    @id @default(uuid())
  name        String    @db.VarChar(255)
  description String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  Product     Product[]
}

model Product {
  id          String   @id @default(uuid())
  name        String   @db.VarChar(255)
  description String?
  price       Float
  imageUrl    String
  categoryId  String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // relationship
  category         Category           @relation(fields: [categoryId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  OrderItem        OrderItem[]
  ShoppingCartItem ShoppingCartItem[]
}

model Order {
  id        String      @id @default(uuid())
  userId    String
  status    OrderStatus @default(PENDING)
  total     Float
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt

  // relationship
  user User @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  OrderItem OrderItem[]
}

model OrderItem {
  id        String @id @default(uuid())
  orderId   String
  productId String
  quantity  Int
  price     Float

  order   Order   @relation(fields: [orderId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  product Product @relation(fields: [productId], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

model ShoppingCart {
  id        String   @id @default(uuid())
  userId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user             User               @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  ShoppingCartItem ShoppingCartItem[]
}

model ShoppingCartItem {
  id        String       @id @default(uuid())
  cartId    String
  productId String
  quantity  Int
  cart      ShoppingCart @relation(fields: [cartId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  product   Product      @relation(fields: [productId], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

enum Role {
  USER
  ADMIN
}

enum OrderStatus {
  PENDING
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELLED
}
