openapi: 3.0.2
info:
  title: API BACKEND
  version: 0.0.0
tags:
  - name: system
    description: For system use
  - name: setting
    description: For settings and management

paths:
  /health:
    get:
      tags:
        - system
      summary: Health check
      description: Endpoint for health checks from ALB
      responses:
        "204":
          description: OK(No Content)
  /register:
    post:
      tags:
        - system
      summary: Register a new user
      description: Register a new user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserRegisterRequest"
      responses:
        "201":
          description: Created
        "400":
          description: |
            Validation error. There is a mistake in the specified parameters.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "409":
          description: |
            Conflic error. The record is exists.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "500":
          description: Server error.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
  /user:
    get:
      tags:
        - system
      summary: Register a new user
      description: Register a new user

      responses:
        "200":
          description: Created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UsersResponse"
        "400":
          description: |
            Validation error. There is a mistake in the specified parameters.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "409":
          description: |
            Conflict error. The record is exists.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "500":
          description: Server error.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
  /user/upload:
    post:
      tags:
        - media
      summary: Upload files to S3
      description: Endpoint to upload one or more files to S3 storage.
      security:
        - Bearer: []
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                files:
                  type: array
                  items:
                    type: string
                    format: binary
                  description: The files to upload
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MultipleUploadPresignedURLResponse"
        "400":
          description: |
            Validation error. There is a mistake in the specified parameters.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "401":
          description: |
            Authentication error. The specified token is invalid.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "500":
          description: Server error.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

components:
  schemas:
    Role:
      type: string
      description: role of user
      enum:
        - ADMIN
        - USER
    UserRegisterRequest:
      type: object
      description: register a new user
      properties:
        id:
          type: string
          example: "U12341834b3730e926dc9ccd41db1837a"
        email:
          type: string
          format: email
          example: "example@gmail.com"
        password:
          type: string
          example: "password"
        username:
          type: string
          example: "username"
        name:
          type: string
          example: "name"
        avatar:
          type: string
          example: "avatar.jpg"
        dayOfBirth:
          type: string
          example: "2021-01-01T00:00:00+09:00"
        phoneNumber:
          type: string
          example: "01012345678"
      required:
        - email
        - password
        - username
        - name
        - avatar
        - dayOfBirth
        - phoneNumber

    UserResponse:
      type: object
      description: user information without password
      properties:
        id:
          type: string
          example: "U12341834b3730e926dc9ccd41db1837a"
        email:
          type: string
          format: email
          example: "example@gmail.com"
        username:
          type: string
          example: "username"
        name:
          type: string
          example: "name"
        avatar:
          type: string
          example: "avatar.jpg"
        dayOfBirth:
          type: string
          example: "2021-01-01T00:00:00+09:00"
        phoneNumber:
          type: string
          example: "01012345678"
      required:
        - email
        - username
        - name
        - avatar
        - dayOfBirth
        - phoneNumber

    UsersResponse:
      type: object
      properties:
        users:
          type: array
          items:
            $ref: "#/components/schemas/UserResponse"
      required:
        - users
    ErrorResponse:
      type: object
      properties:
        name:
          type: string
          description: Error name. The name of the error class that occurs on the server side.
          example: "NotFoundError"
        message:
          type: string
          description: Error message
          example: "The target resource was not found."
      required:
        - name
        - message
    OneUploadPresignedURLResponse:
      type: object
      properties:
        fileName:
          type: string
          example: "example.jpg"
        uploadUrl:
          type: string
          example: "https://your-bucket.s3.amazonaws.com/path/to/file.jpg"
        fileType:
          type: string
          example: "image/jpeg"
      required:
        - fileName
        - uploadUrl
        - fileType

    MultipleUploadPresignedURLResponse:
      type: object
      properties:
        files:
          type: array
          items:
            $ref: "#/components/schemas/OneUploadPresignedURLResponse"
      required:
        - files
  securitySchemes:
    Bearer:
      type: http
      scheme: bearer
      description: Access token
